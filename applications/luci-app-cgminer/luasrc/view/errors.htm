<%#
 Copyright 2010 Jo-Philipp Wich <jow@openwrt.org>
 Licensed to the public under the Apache License 2.0.
-%>

<%+header%>

<script type="text/javascript" src="<%=resource%>/cbi.js"></script>
<script type="text/javascript">//<![CDATA[

const VIEW_ERRORS = 6;

var G;

var label_25;
var label_50;
var label_75;

var label_scale;

var line_errors = [];

var label_errors = [];

var sample_stamp = 0;
var sample = [];

/* wait for SVG */
window.setTimeout(
    function() {
        var svg = document.getElementById('errors_svg');

        try {
            G = svg.getSVGDocument
                ? svg.getSVGDocument() : svg.contentDocument;
        }
        catch(e) {
            G = document.embeds['errors_svg'].getSVGDocument();
        }

        if (!G)
        {
            window.setTimeout(arguments.callee, 1000);
        }
        else
        {
            var i, j, k;

            var STEP = 5;
            var WIDTH = svg.offsetWidth - 2;
            var HEIGHT = svg.offsetHeight - 2;
            var DATA_WANTED = Math.floor(WIDTH / STEP);

            /* find svg elements */
            label_25 = G.getElementById('label_25');
            label_50 = G.getElementById('label_50');
            label_75 = G.getElementById('label_75');

            label_scale = document.getElementById('scale');

            for (k = 0; k < VIEW_ERRORS; ++k) {
                line_errors[k] = G.getElementById('errors' + (k + 1));
            }

            for (i = 0; i < VIEW_ERRORS; ++i)
            {
                var label_prefix = 'lb_errors' + (i + 1);
                label_errors[i] = document.getElementById(label_prefix);
            }

            /* plot horizontal time interval lines */
            var LINE1_X = WIDTH % (STEP * 60);
            for (i = LINE1_X; i < WIDTH; i += STEP * 60)
            {
                var line = G.createElementNS('http://www.w3.org/2000/svg', 'line');
                line.setAttribute('x1', i);
                line.setAttribute('y1', 0);
                line.setAttribute('x2', i);
                line.setAttribute('y2', '100%');
                line.setAttribute('style', 'stroke:black;stroke-width:0.1');

                var text = G.createElementNS('http://www.w3.org/2000/svg', 'text');
                text.setAttribute('x', i + 5);
                text.setAttribute('y', 15);
                text.setAttribute('style', 'fill:#999999; font-size:9pt');
                text.appendChild(G.createTextNode(Math.round((WIDTH - i) / STEP / 60) + 'm'));

                label_25.parentNode.appendChild(line);
                label_25.parentNode.appendChild(text);
            }

            label_25.setAttribute('x', LINE1_X - 2);
            label_50.setAttribute('x', LINE1_X - 2);
            label_75.setAttribute('x', LINE1_X - 2);

            label_scale.innerHTML = String.format('<%:(%d minute window, %d second interval)%>', DATA_WANTED / 60, 3);

            /* prefill datasets */
            for (k = 0; k < VIEW_ERRORS; ++k)
            {
                sample[k] = [];
                for (i = 0; i < DATA_WANTED; ++i) {
                    sample[k][i] = 0;
                }
            }

            /* render datasets, start update interval */
            XHR.poll(3, '<%=build_url("admin/status/miner/devs_status")%>', null,
                function(x, data)
                {
                    var i, j, k;

                    if (data && data.length)
                    {
                        for (i = data.length - 1; i >= 0; --i)
                        {
                            /* skip overlapping entries */
                            if (data[i]["time"] <= sample_stamp) {
                                continue;
                            }

                            var chains_cur = data[i]["chains"];
                            for (k = 0; k < VIEW_ERRORS; ++k)
                            {
                                for (j = 0; j < chains_cur.length; ++j)
                                {
                                    if (chains_cur[j]["id"] == k) {
                                        var errs = chains_cur[j]["errs"];
                                        sample[k].push(errs);
                                        break;
                                    }
                                }
                                if (j >= chains_cur.length) {
                                    /* chain 'k' not found -> duplicate previous value */
                                    sample[k].push(sample[k][sample[k].length - 1]);
                                }
                            }
                        }

                        /* cut off outdated entries */
                        for (k = 0; k < VIEW_ERRORS; ++k) {
                            sample[k] = sample[k].slice(sample[k].length - DATA_WANTED);
                        }

                        /* remember current timestamp, calculate horizontal scale */
                        sample_stamp = data[0]["time"];
                    }

                    var sample_length = sample[0].length;
                    var errors_max = 0;
                    for (i = 0; i < sample_length; ++i)
                    {
                        for (k = 0; k < VIEW_ERRORS; ++k) {
                            var sample_cur = sample[k][i];
                            errors_max = Math.max(errors_max, sample_cur);
                        }
                    }

                    var data_scale = errors_max ? (HEIGHT / (errors_max * 1.1)) : 0;

                    /* plot data */
                    label_25.firstChild.data = (1.1 * 0.25 * errors_max).toFixed(2);
                    label_50.firstChild.data = (1.1 * 0.50 * errors_max).toFixed(2);
                    label_75.firstChild.data = (1.1 * 0.75 * errors_max).toFixed(2);

                    for (k = 0; k < VIEW_ERRORS; ++k)
                    {
                        var points = '0,' + HEIGHT;
                        var y = 0;

                        for (i = 0; i < sample_length; ++i)
                        {
                            var x = i * STEP;

                            y = HEIGHT - Math.floor(sample[k][i] * data_scale);
                            points += ' ' + x + ',' + y.toFixed(1);
                        }

                        points += ' ' + WIDTH + ',' + y + ' ' + WIDTH + ',' + HEIGHT;
                        line_errors[k].setAttribute('points', points);
                    }

                    for (k = 0; k < VIEW_ERRORS; ++k)
                    {
                        var errors_cur = sample[k][sample[k].length - 1];
                        label_errors[k].innerHTML = errors_cur;
                    }
                }
            );
        }
    }, 1000
);
//]]></script>

<h2 name="content"><%:Miner Chains Errors%></h2>

<embed id="errors_svg" style="width:100%; height:300px; border:1px solid #000000; background-color:#FFFFFF" src="<%=resource%>/miner_errors.svg" />
<div style="text-align:right"><small id="scale"></small></div>
<br />

<table style="width:100%; table-layout:fixed" cellspacing="5">
 <tr>
  <td style="text-align:right; vertical-align:top"><strong style="border-bottom:2px solid #ff0000; white-space:nowrap"><%:Chain 0:%></strong></td>
  <td id="lb_errors1">0</td>

  <td style="text-align:right; vertical-align:top"><strong style="border-bottom:2px solid #ff6600; white-space:nowrap"><%:Chain 1:%></strong></td>
  <td id="lb_errors2">0</td>

  <td style="text-align:right; vertical-align:top"><strong style="border-bottom:2px solid #ffaa00; white-space:nowrap"><%:Chain 2:%></strong></td>
  <td id="lb_errors3">0</td>
 </tr>
 <tr>
  <td style="text-align:right; vertical-align:top"><strong style="border-bottom:2px solid #0000ff; white-space:nowrap"><%:Chain 3:%></strong></td>
  <td id="lb_errors4">0</td>

  <td style="text-align:right; vertical-align:top"><strong style="border-bottom:2px solid #0066ff; white-space:nowrap"><%:Chain 4:%></strong></td>
  <td id="lb_errors5">0</td>

  <td style="text-align:right; vertical-align:top"><strong style="border-bottom:2px solid #00aaff; white-space:nowrap"><%:Chain 5:%></strong></td>
  <td id="lb_errors6">0</td>
 </tr>
</table>

<%+footer%>
