<%#
 Copyright 2010 Jo-Philipp Wich <jow@openwrt.org>
 Licensed to the public under the Apache License 2.0.
-%>

<%+header%>

<script type="text/javascript" src="<%=resource%>/cbi.js"></script>
<script type="text/javascript">//<![CDATA[

const VIEW_HASHRATES = 3;
const VIEW_CHAINS = 6;

const CURRENT = "cur";
const AVERAGE = "avg";
const PEAK = "peak";

const HASHRATE_SUFFIX = [ CURRENT, AVERAGE, PEAK ];

var G;

var label_25;
var label_50;
var label_75;

var label_scale;

var line_hashrate = [];

var label_hashrate = {};
var label_chain = [];
var label_accepted = [];
var label_rejected = [];

var sample_stamp = 0;
var sample = [];

/* wait for SVG */
window.setTimeout(
    function() {
        var svg = document.getElementById('hashrate_svg');

        try {
            G = svg.getSVGDocument
                ? svg.getSVGDocument() : svg.contentDocument;
        }
        catch(e) {
            G = document.embeds['hashrate_svg'].getSVGDocument();
        }

        if (!G)
        {
            window.setTimeout(arguments.callee, 1000);
        }
        else
        {
            var i, j, k;

            var STEP = 5;
            var WIDTH = svg.offsetWidth - 2;
            var HEIGHT = svg.offsetHeight - 2;
            var DATA_WANTED = Math.floor(WIDTH / STEP);

            /* find svg elements */
            label_25 = G.getElementById('label_25');
            label_50 = G.getElementById('label_50');
            label_75 = G.getElementById('label_75');

            label_scale = document.getElementById('scale');

            for (k = 0; k < VIEW_HASHRATES; ++k) {
                line_hashrate[k] = G.getElementById('hashrate' + (k + 1));
            }

            for (j = 0; j < HASHRATE_SUFFIX.length; ++j)
            {
                var label_suffix = HASHRATE_SUFFIX[j];
                label_hashrate[label_suffix] = [];
                for (i = 0; i < VIEW_HASHRATES; ++i)
                {
                    var label_prefix = 'lb_hashrate' + (i + 1);
                    label_hashrate[label_suffix][i] = document.getElementById(label_prefix + '_' + label_suffix);
                }
            }
            for (i = 0; i < VIEW_CHAINS; ++i) {
                label_chain[i] = document.getElementById('lb_hashrate_chain' + i);
                label_accepted[i] = document.getElementById('lb_accepted_chain' + i);
                label_rejected[i] = document.getElementById('lb_rejected_chain' + i);
            }

            /* plot horizontal time interval lines */
            var LINE1_X = WIDTH % (STEP * 60);
            for (i = LINE1_X; i < WIDTH; i += STEP * 60)
            {
                var line = G.createElementNS('http://www.w3.org/2000/svg', 'line');
                line.setAttribute('x1', i);
                line.setAttribute('y1', 0);
                line.setAttribute('x2', i);
                line.setAttribute('y2', '100%');
                line.setAttribute('style', 'stroke:black;stroke-width:0.1');

                var text = G.createElementNS('http://www.w3.org/2000/svg', 'text');
                text.setAttribute('x', i + 5);
                text.setAttribute('y', 15);
                text.setAttribute('style', 'fill:#999999; font-size:9pt');
                text.appendChild(G.createTextNode(Math.round((WIDTH - i) / STEP / 60) + 'm'));

                label_25.parentNode.appendChild(line);
                label_25.parentNode.appendChild(text);
            }

            label_25.setAttribute('x', LINE1_X - 2);
            label_50.setAttribute('x', LINE1_X - 2);
            label_75.setAttribute('x', LINE1_X - 2);

            label_scale.innerHTML = String.format('<%:(%d minute window, %d second interval)%>', DATA_WANTED / 60, 3);

            /* prefill datasets */
            for (k = 0; k < VIEW_HASHRATES; ++k)
            {
                sample[k] = [];
                for (i = 0; i < DATA_WANTED; ++i) {
                    sample[k][i] = 0;
                }
            }

            /* render datasets, start update interval */
            XHR.poll(3, '<%=build_url("admin/status/miner/devs_status")%>', null,
                function(x, data)
                {
                    var chains = [];
                    var i, j, k;

                    if (data && data.length)
                    {
                        for (i = data.length - 1; i >= 0; --i)
                        {
                            /* skip overlapping entries */
                            if (data[i]["time"] <= sample_stamp) {
                                continue;
                            }

                            var chains_cur = data[i]["chains"];
                            for (k = 0; k < VIEW_HASHRATES; ++k)
                            {
                                var hashrate = 0.0;
                                for (j = 0; j < chains_cur.length; ++j) {
                                    hashrate += chains_cur[j]["mhs"][k + 1];
                                }
                                sample[k].push(hashrate);
                            }
                        }

                        /* cut off outdated entries */
                        for (k = 0; k < VIEW_HASHRATES; ++k) {
                            sample[k] = sample[k].slice(sample[k].length - DATA_WANTED);
                        }

                        /* remember current timestamp, calculate horizontal scale */
                        sample_stamp = data[0]["time"];
                    }

                    var hashrate_cur = [];
                    var hashrate_sum = [];
                    var hashrate_peak = [];

                    for (k = 0; k < VIEW_HASHRATES; ++k)
                    {
                        hashrate_cur[k] = 0.0;
                        hashrate_sum[k] = 0.0;
                        hashrate_peak[k] = 0.0;
                    }

                    var sample_length = sample[0].length;
                    for (i = 0; i < sample_length; ++i)
                    {
                        for (k = 0; k < VIEW_HASHRATES; ++k) {
                            hashrate_peak[k] = Math.max(hashrate_peak[k], sample[k][i]);
                            hashrate_sum[k] += sample[k][i];
                        }
                    }

                    var hashrate_max = 0;
                    for (k = 0; k < VIEW_HASHRATES; ++k) {
                        hashrate_max = Math.max(hashrate_max, hashrate_peak[k]);
                    }

                    var data_scale = hashrate_max ? (HEIGHT / (hashrate_max * 1.1)) : 0;

                    /* plot data */
                    label_25.firstChild.data = (1.1 * 0.25 * hashrate_max / 1000000).toFixed(2);
                    label_50.firstChild.data = (1.1 * 0.50 * hashrate_max / 1000000).toFixed(2);
                    label_75.firstChild.data = (1.1 * 0.75 * hashrate_max / 1000000).toFixed(2);

                    for (k = 0; k < VIEW_HASHRATES; ++k)
                    {
                        var points = '0,' + HEIGHT;
                        var y = 0;

                        for (i = 0; i < sample_length; ++i) {
                            var x = i * STEP;

                            y = HEIGHT - Math.floor(sample[k][i] * data_scale);
                            points += ' ' + x + ',' + y;
                        }

                        points += ' ' + WIDTH + ',' + y + ' ' + WIDTH + ',' + HEIGHT;
                        line_hashrate[k].setAttribute('points', points);
                    }

                    if (data && data.length) {
                        chains = data[0]["chains"];
                    }
                    for (i = 0, j = 0; i < VIEW_CHAINS; ++i)
                    {
                        if (j < chains.length && i === chains[j]["id"])
                        {
                            var chain = chains[j++];
                            var mhs = chain["mhs"][0];
                            label_chain[i].innerHTML = (mhs ? (mhs / 1000).toFixed(2) : 0) + ' Gh/s';
                            for (k = 0; k < VIEW_HASHRATES; ++k) {
                                hashrate_cur[k] += chain["mhs"][k + 1];
                            }
                            var accepted = chain["acpt"];
                            var rejected = chain["rjct"];
                            var ar_sum = accepted + rejected;
                            label_accepted[i].innerHTML = accepted;
                            label_rejected[i].innerHTML = rejected;
                            if (ar_sum)
                            {
                                label_accepted[i].innerHTML += ' (' + (accepted / ar_sum * 100).toFixed(1) + '%)';
                                label_rejected[i].innerHTML += ' (' + (rejected / ar_sum * 100).toFixed(1) + '%)';
                            }
                        }
                        else
                        {
                            label_chain[i].innerHTML = 0 + ' Mh/s';
                            label_accepted[i].innerHTML = 0;
                            label_rejected[i].innerHTML = 0;
                        }
                    }

                    for (k = 0; k < VIEW_HASHRATES; ++k)
                    {
                        label_hashrate[CURRENT][k].innerHTML =
                            (hashrate_cur[k] ? (hashrate_cur[k] / 1000000).toFixed(2) : 0) + ' Th/s';
                        label_hashrate[AVERAGE][k].innerHTML =
                            (hashrate_sum[k] ? (hashrate_sum[k] / sample_length / 1000000).toFixed(2) : 0) + ' Th/s';
                        label_hashrate[PEAK][k].innerHTML =
                            (hashrate_peak[k] ? (hashrate_peak[k] / 1000000).toFixed(2) : 0) + ' Th/s';
                    }
                }
            );
        }
    }, 1000
);
//]]></script>

<h2 name="content"><%:Miner Hash Rate%></h2>

<embed id="hashrate_svg" style="width:100%; height:300px; border:1px solid #000000; background-color:#FFFFFF" src="<%=resource%>/miner_hashrate.svg" />
<div style="text-align:right"><small id="scale"></small></div>
<br />

<table style="width:100%; table-layout:fixed" cellspacing="5">
 <tr>
  <td style="text-align:right; vertical-align:top"><strong style="border-bottom:2px solid #ff0000; white-space:nowrap"><%:1 Minute Hash Rate:%></strong></td>
  <td id="lb_hashrate1_cur">0</td>

  <td style="text-align:right; vertical-align:top"><strong><%:Average:%></strong></td>
  <td id="lb_hashrate1_avg">0</td>

  <td style="text-align:right; vertical-align:top"><strong><%:Peak:%></strong></td>
  <td id="lb_hashrate1_peak">0</td>
 </tr>
 <tr>
  <td style="text-align:right; vertical-align:top"><strong style="border-bottom:2px solid #ff6600; white-space:nowrap"><%:5 Minute Hash Rate:%></strong></td>
  <td id="lb_hashrate2_cur">0</td>

  <td style="text-align:right; vertical-align:top"><strong><%:Average:%></strong></td>
  <td id="lb_hashrate2_avg">0</td>

  <td style="text-align:right; vertical-align:top"><strong><%:Peak:%></strong></td>
  <td id="lb_hashrate2_peak">0</td>
 </tr>
 <tr>
  <td style="text-align:right; vertical-align:top"><strong style="border-bottom:2px solid #ffaa00; white-space:nowrap"><%:15 Minute Hash Rate:%></strong></td>
  <td id="lb_hashrate3_cur">0</td>

  <td style="text-align:right; vertical-align:top"><strong><%:Average:%></strong></td>
  <td id="lb_hashrate3_avg">0</td>

  <td style="text-align:right; vertical-align:top"><strong><%:Peak:%></strong></td>
  <td id="lb_hashrate3_peak">0</td>
 </tr>
 <tr>
  <td style="text-align:right; vertical-align:top"><strong><%:Chain 0:%></strong><br /><small><%:Accepted:%><br /><%:Rejected:%></small></td>
  <td>
   <span id="lb_hashrate_chain0">0</span><br />
   <small id="lb_accepted_chain0">0</small><br />
   <small id="lb_rejected_chain0">0</small>
  </td>

  <td style="text-align:right; vertical-align:top"><strong><%:Chain 1:%></strong><br /><small><%:Accepted:%><br /><%:Rejected:%></small></td>
  <td>
   <span id="lb_hashrate_chain1">0</span><br />
   <small id="lb_accepted_chain1">0</small><br />
   <small id="lb_rejected_chain1">0</small>
  </td>

  <td style="text-align:right; vertical-align:top"><strong><%:Chain 2:%></strong><br /><small><%:Accepted:%><br /><%:Rejected:%></small></td>
  <td>
   <span id="lb_hashrate_chain2">0</span><br />
   <small id="lb_accepted_chain2">0</small><br />
   <small id="lb_rejected_chain2">0</small>
  </td>
 </tr>
 <tr>
  <td style="text-align:right; vertical-align:top"><strong><%:Chain 3:%></strong><br /><small><%:Accepted:%><br /><%:Rejected:%></small></td>
  <td>
   <span id="lb_hashrate_chain3">0</span><br />
   <small id="lb_accepted_chain3">0</small><br />
   <small id="lb_rejected_chain3">0</small>
  </td>

  <td style="text-align:right; vertical-align:top"><strong><%:Chain 4:%></strong><br /><small><%:Accepted:%><br /><%:Rejected:%></small></td>
  <td>
   <span id="lb_hashrate_chain4">0</span><br />
   <small id="lb_accepted_chain4">0</small><br />
   <small id="lb_rejected_chain4">0</small>
  </td>

  <td style="text-align:right; vertical-align:top"><strong><%:Chain 5:%></strong><br /><small><%:Accepted:%><br /><%:Rejected:%></small></td>
  <td>
   <span id="lb_hashrate_chain5">0</span><br />
   <small id="lb_accepted_chain5">0</small><br />
   <small id="lb_rejected_chain5">0</small>
  </td>
 </tr>
</table>

<%+footer%>
